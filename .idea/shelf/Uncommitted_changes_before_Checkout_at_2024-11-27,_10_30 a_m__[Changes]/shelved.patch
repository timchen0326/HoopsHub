Index: src/main/java/view/playgame/PlayGamePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view.playgame;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.FlowLayout;\nimport java.awt.event.ItemEvent;\nimport java.util.List;\nimport java.util.Random;\n\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JTextArea;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport app.Session;\nimport data_access.AccountDataAccessObject;\nimport entity.PlayerStatistic;\nimport interface_adapter.play_game_aspects.PlayGameController;\nimport view.MainFrame;\nimport view.ThemeManager;\n\n/**\n * Panel for playing the game. Contains input fields for player name and year, a text area for displaying player stats,\n * a combo box for selecting a stat to guess, and buttons for guessing over or under the generated value.\n */\npublic class PlayGamePanel extends JPanel {\n    private static final int BORDER_GAP = 20;\n    private static final double RANDOM_OFFSET_MULTIPLIER = 3.0;\n    private final InputPanel inputPanel = new InputPanel();\n    private final YearSelectionPanel yearPanel = new YearSelectionPanel();\n    private final StatsAreaPanel statsAreaPanel = new StatsAreaPanel();\n    private final GuessPanel guessPanel = new GuessPanel();\n    private final ThemeManager themeManager = ThemeManager.getInstance();\n\n    private double currentTrueAverage;\n\n    public PlayGamePanel(MainFrame frame, PlayGameController controller) {\n        setLayout(new BorderLayout(BORDER_GAP, BORDER_GAP));\n        updateTheme();\n\n        // Back Button\n        final JButton backButton = new JButton(\"Back\");\n        backButton.addActionListener(event -> {\n            frame.switchTo(\"Home\");\n            reset();\n        });\n        final JPanel backPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        backPanel.add(backButton);\n\n        // Add Listeners\n        inputPanel.getFetchButton().addActionListener(event -> fetchPlayerYears(controller));\n        yearPanel.getFetchYearButton().addActionListener(event -> fetchPlayerStats(controller));\n        guessPanel.getGuessComboBox().addItemListener(event -> {\n            if (event.getStateChange() == ItemEvent.SELECTED) {\n                updateGeneratedValue(controller);\n            }\n        });\n\n        guessPanel.getOverButton().addActionListener(event -> handleOverUnderGuess(true));\n        guessPanel.getUnderButton().addActionListener(event -> handleOverUnderGuess(false));\n\n        // Layout\n        add(inputPanel, BorderLayout.NORTH);\n        add(yearPanel, BorderLayout.WEST);\n        add(statsAreaPanel, BorderLayout.CENTER);\n        add(guessPanel, BorderLayout.EAST);\n        add(backPanel, BorderLayout.SOUTH);\n    }\n\n    private void fetchPlayerYears(PlayGameController controller) {\n        final String playerName = inputPanel.getPlayerNameField().getText();\n        final List<String> availableYears = controller.getAvailableYears(playerName);\n\n        if (!availableYears.isEmpty()) {\n            yearPanel.getYearComboBox().removeAllItems();\n            for (String year : availableYears) {\n                yearPanel.getYearComboBox().addItem(year);\n            }\n            yearPanel.setVisible(true);\n        }\n        else {\n            JOptionPane.showMessageDialog(this, \"No data available for this player.\");\n        }\n    }\n\n    private void fetchPlayerStats(PlayGameController controller) {\n        final String playerName = inputPanel.getPlayerNameField().getText();\n        final String selectedYear = (String) yearPanel.getYearComboBox().getSelectedItem();\n\n        System.out.println(\"Player: \" + playerName + \", Selected Year: \" + selectedYear);\n        if (selectedYear != null) {\n            final PlayerStatistic stats = controller.fetchPlayerStatisticsByYear(playerName, selectedYear);\n            final String formattedStats = stats.formatPlayerStats();\n            statsAreaPanel.getStatsArea().setText(formattedStats);\n\n            // Automatically update generated value\n            updateGeneratedValue(controller);\n        }\n        else {\n            JOptionPane.showMessageDialog(this, \"Please select a valid year.\");\n        }\n    }\n\n    private void updateGeneratedValue(PlayGameController controller) {\n        final String selectedStat = (String) guessPanel.getGuessComboBox().getSelectedItem();\n        final String playerName = inputPanel.getPlayerNameField().getText();\n        final String selectedYear = (String) yearPanel.getYearComboBox().getSelectedItem();\n\n        if (selectedYear != null && selectedStat != null) {\n            currentTrueAverage = controller.getAverageStatistic(selectedStat, playerName, selectedYear);\n            final double randomValue = generateRandomOffset(currentTrueAverage);\n            guessPanel.getRandomGuessLabel().setText(\"Generated Value: \" + String.format(\"%.2f\", randomValue));\n        }\n    }\n\n    private void handleOverUnderGuess(boolean isOver) {\n        final double randomValue = getRandomValue();\n        final String result = determineResult(isOver, randomValue);\n        showResultDialog(result, randomValue);\n        updateSessionInfo(isOver, randomValue);\n    }\n\n    private double getRandomValue() {\n        return Double.parseDouble(guessPanel.getRandomGuessLabel().getText().split(\": \")[1]);\n    }\n\n    private String determineResult(boolean isOver, double randomValue) {\n        final boolean isCorrect;\n        final String result;\n\n        if (isOver) {\n            isCorrect = currentTrueAverage > randomValue;\n            if (isCorrect) {\n                result = \"You WON! It's Over!\";\n            }\n            else {\n                result = \"You Lose! It's Under!\";\n            }\n        }\n        else {\n            isCorrect = currentTrueAverage < randomValue;\n            if (isCorrect) {\n                result = \"You WON! It's Under!\";\n            }\n            else {\n                result = \"You Lose! It's Over!\";\n            }\n        }\n\n        updateWinLossStats(isCorrect);\n        return result;\n    }\n\n    private void showResultDialog(String result, double randomValue) {\n        JOptionPane.showMessageDialog(this, result + \"\\nTrue Average: \"\n                + currentTrueAverage + \"\\nRandom Value: \" + randomValue);\n    }\n\n    private void updateWinLossStats(boolean isCorrect) {\n        final Session session = Session.getInstance();\n        if (isCorrect) {\n            session.setWin(session.getWin() + 1);\n        }\n        else {\n            session.setLose(session.getLose() + 1);\n        }\n    }\n\n    private void updateSessionInfo(boolean isOver, double randomValue) {\n        final Session session = Session.getInstance();\n\n        // Determine if the guess was correct\n        final boolean isCorrect = isGuessCorrect(isOver, randomValue);\n        final String result;\n        if (isCorrect) {\n            result = \"Win\";\n        }\n        else {\n            result = \"Lose\";\n        }\n\n        // Create history entry with result\n        final JSONObject newHistoryEntry = createHistoryEntry(result);\n        session.addHistoryEntry(newHistoryEntry);\n\n        // Create and push updated info\n        final JSONObject updatedInfo = createUpdatedInfo(session);\n        pushUpdatedInfoToApi(updatedInfo);\n    }\n\n    private boolean isGuessCorrect(boolean isOver, double randomValue) {\n        final boolean result;\n        if (isOver) {\n            result = currentTrueAverage > randomValue;\n        }\n        else {\n            result = currentTrueAverage < randomValue;\n        }\n        return result;\n    }\n\n    private JSONObject createHistoryEntry(String result) {\n        final JSONObject historyEntry = new JSONObject();\n        historyEntry.put(\"player\", inputPanel.getPlayerNameField().getText());\n        historyEntry.put(\"stats\", (String) guessPanel.getGuessComboBox().getSelectedItem());\n        historyEntry.put(\"year\", (String) yearPanel.getYearComboBox().getSelectedItem());\n        historyEntry.put(\"result\", result);\n        return historyEntry;\n    }\n\n    private JSONObject createUpdatedInfo(Session session) {\n        final JSONObject updatedInfo = new JSONObject();\n        updatedInfo.put(\"username\", session.getUsername());\n        updatedInfo.put(\"password\", session.getPassword());\n\n        final JSONObject info = new JSONObject();\n        info.put(\"win\", session.getWin());\n        info.put(\"lose\", session.getLose());\n        info.put(\"history\", new JSONArray(session.getHistory()));\n        info.put(\"password\", session.getPassword());\n\n        updatedInfo.put(\"info\", info);\n        return updatedInfo;\n    }\n\n    private void pushUpdatedInfoToApi(JSONObject updatedInfo) {\n        try {\n            final AccountDataAccessObject accountDataAccess = new AccountDataAccessObject();\n            accountDataAccess.updateUserInfo(updatedInfo);\n        }\n        catch (Exception ex) {\n            JOptionPane.showMessageDialog(this, \"Failed to update user info: \" + ex.getMessage());\n        }\n    }\n\n    private double generateRandomOffset(double trueAverage) {\n        final Random random = new Random();\n        final double offsetMultiplier;\n\n        if (random.nextBoolean()) {\n            offsetMultiplier = 1;\n        }\n        else {\n            offsetMultiplier = -1;\n        }\n\n        return trueAverage + (random.nextDouble() * RANDOM_OFFSET_MULTIPLIER) * offsetMultiplier;\n    }\n\n    /**\n     * Reset the PlayGamePanel components to their default state.\n     */\n    private void reset() {\n        inputPanel.getPlayerNameField().setText(\"\");\n        yearPanel.getYearComboBox().removeAllItems();\n        yearPanel.setVisible(false);\n        statsAreaPanel.getStatsArea().setText(\"\");\n        guessPanel.getGuessComboBox().setSelectedIndex(0);\n        guessPanel.getRandomGuessLabel().setText(\"Generated Value: --\");\n    }\n\n    private void updateTheme() {\n        setBackground(themeManager.getBackgroundColor());\n        setForeground(themeManager.getTextColor());\n\n        for (Component comp : getComponents()) {\n            if (comp instanceof JLabel) {\n                comp.setForeground(themeManager.getTextColor());\n            }\n            else if (comp instanceof JTextArea) {\n                comp.setBackground(themeManager.getBackgroundColor());\n                comp.setForeground(themeManager.getTextColor());\n            }\n        }\n    }\n}\n
===================================================================
diff --git a/src/main/java/view/playgame/PlayGamePanel.java b/src/main/java/view/playgame/PlayGamePanel.java
--- a/src/main/java/view/playgame/PlayGamePanel.java	(revision 370c13426ea82bfdd2962b1463048c6fc165e4bf)
+++ b/src/main/java/view/playgame/PlayGamePanel.java	(date 1732721226802)
@@ -21,7 +21,7 @@
 import entity.PlayerStatistic;
 import interface_adapter.play_game_aspects.PlayGameController;
 import view.MainFrame;
-import view.ThemeManager;
+import view.ThemeManager.ThemeManager;
 
 /**
  * Panel for playing the game. Contains input fields for player name and year, a text area for displaying player stats,
