Index: .idea/workspace.xml
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
deleted file mode 100644
--- a/.idea/workspace.xml	(revision b09fecaaf2e48c3e2a5b59bd21987710e4863bc1)
+++ /dev/null	(revision b09fecaaf2e48c3e2a5b59bd21987710e4863bc1)
@@ -1,339 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="AutoImportSettings">
-    <option name="autoReloadType" value="SELECTIVE" />
-  </component>
-  <component name="ChangeListManager">
-    <list default="true" id="2687973d-8249-4f02-8355-4363ebdade45" name="Changes" comment="change" />
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="FileTemplateManagerImpl">
-    <option name="RECENT_TEMPLATES">
-      <list>
-        <option value="Class" />
-      </list>
-    </option>
-  </component>
-  <component name="Git.Merge.Settings">
-    <option name="BRANCH" value="origin/main" />
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="main" />
-      </map>
-    </option>
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-    <option name="ROOT_SYNC" value="DONT_SYNC" />
-  </component>
-  <component name="GitHubPullRequestSearchHistory">{
-  &quot;lastFilter&quot;: {
-    &quot;state&quot;: &quot;OPEN&quot;,
-    &quot;assignee&quot;: &quot;rjlee224&quot;
-  }
-}</component>
-  <component name="GitToolBoxStore">
-    <option name="recentBranches">
-      <RecentBranches>
-        <option name="branchesForRepo">
-          <list>
-            <RecentBranchesForRepo>
-              <option name="branches">
-                <list>
-                  <RecentBranch>
-                    <option name="branchName" value="model-update" />
-                    <option name="lastUsedInstant" value="1731947528" />
-                  </RecentBranch>
-                  <RecentBranch>
-                    <option name="branchName" value="main" />
-                    <option name="lastUsedInstant" value="1731947527" />
-                  </RecentBranch>
-                </list>
-              </option>
-              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$" />
-            </RecentBranchesForRepo>
-          </list>
-        </option>
-      </RecentBranches>
-    </option>
-  </component>
-  <component name="GithubPullRequestsUISettings">{
-  &quot;selectedUrlAndAccountId&quot;: {
-    &quot;url&quot;: &quot;https://github.com/timchen0326/HoopsHub.git&quot;,
-    &quot;accountId&quot;: &quot;3ec1ab34-ecf2-4d6b-8aee-aa0ae8346736&quot;
-  }
-}</component>
-  <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 5
-}</component>
-  <component name="ProjectId" id="2owl3RKtehtcblmMrK11SEfNMZM" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.GameApplication.executor": "Run",
-    "Application.MainApplication.executor": "Run",
-    "Application.MainGameSearchApplication.executor": "Run",
-    "Application.MainSearchApplication.executor": "Run",
-    "JUnit.All in note-application.executor": "Coverage",
-    "JUnit.SearchHistoryInteractorTest (1).executor": "Coverage",
-    "JUnit.SearchHistoryInteractorTest.executor": "Coverage",
-    "JUnit.SearchHistoryRecordTest.executor": "Coverage",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "mohit",
-    "kotlin-language-version-configured": "true",
-    "node.js.detected.package.eslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "project.propVCSSupport.DirectoryMappings",
-    "vue.rearranger.settings.migration": "true"
-  }
-}]]></component>
-  <component name="RunManager" selected="Application.MainApplication">
-    <configuration name="MainApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="app.MainApplication" />
-      <module name="note-application" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="app.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="All in note-application" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
-      <module name="note-application" />
-      <option name="PACKAGE_NAME" value="" />
-      <option name="TEST_OBJECT" value="package" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="SearchHistoryInteractorTest (1)" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
-      <module name="note-application" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="use_case.search.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <option name="PACKAGE_NAME" value="use_case.search" />
-      <option name="MAIN_CLASS_NAME" value="use_case.search.SearchHistoryInteractorTest" />
-      <option name="TEST_OBJECT" value="class" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="SearchHistoryInteractorTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
-      <module name="note-application" />
-      <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="SearchHistoryInteractorTest" />
-      <option name="TEST_OBJECT" value="class" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="SearchHistoryRecordTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
-      <module name="note-application" />
-      <option name="PACKAGE_NAME" value="" />
-      <option name="MAIN_CLASS_NAME" value="SearchHistoryRecordTest" />
-      <option name="TEST_OBJECT" value="class" />
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <recent_temporary>
-      <list>
-        <item itemvalue="Application.MainApplication" />
-        <item itemvalue="JUnit.SearchHistoryRecordTest" />
-        <item itemvalue="JUnit.SearchHistoryInteractorTest (1)" />
-        <item itemvalue="JUnit.SearchHistoryInteractorTest" />
-        <item itemvalue="JUnit.All in note-application" />
-      </list>
-    </recent_temporary>
-  </component>
-  <component name="SharedIndexes">
-    <attachedChunks>
-      <set>
-        <option value="bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142" />
-        <option value="bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142" />
-      </set>
-    </attachedChunks>
-  </component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="2687973d-8249-4f02-8355-4363ebdade45" name="Changes" comment="add search button and back button" />
-      <created>1725200606304</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1725200606304</updated>
-      <workItem from="1731788321326" duration="6950000" />
-      <workItem from="1731946685436" duration="6724000" />
-      <workItem from="1732159120624" duration="6025000" />
-      <workItem from="1732671091439" duration="5113000" />
-    </task>
-    <task id="LOCAL-00001" summary="add search button and back button">
-      <option name="closed" value="true" />
-      <created>1731396633141</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1731396633141</updated>
-    </task>
-    <task id="LOCAL-00002" summary="fix game history fonts and add test cases">
-      <option name="closed" value="true" />
-      <created>1732557144665</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1732557144665</updated>
-    </task>
-    <task id="LOCAL-00003" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732671714758</created>
-      <option name="number" value="00003" />
-      <option name="presentableId" value="LOCAL-00003" />
-      <option name="project" value="LOCAL" />
-      <updated>1732671714758</updated>
-    </task>
-    <task id="LOCAL-00004" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732672411906</created>
-      <option name="number" value="00004" />
-      <option name="presentableId" value="LOCAL-00004" />
-      <option name="project" value="LOCAL" />
-      <updated>1732672411906</updated>
-    </task>
-    <task id="LOCAL-00005" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732672756365</created>
-      <option name="number" value="00005" />
-      <option name="presentableId" value="LOCAL-00005" />
-      <option name="project" value="LOCAL" />
-      <updated>1732672756365</updated>
-    </task>
-    <task id="LOCAL-00006" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732672953042</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1732672953042</updated>
-    </task>
-    <task id="LOCAL-00007" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732673223319</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1732673223319</updated>
-    </task>
-    <task id="LOCAL-00008" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732673463910</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1732673463910</updated>
-    </task>
-    <task id="LOCAL-00009" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732673785370</created>
-      <option name="number" value="00009" />
-      <option name="presentableId" value="LOCAL-00009" />
-      <option name="project" value="LOCAL" />
-      <updated>1732673785370</updated>
-    </task>
-    <task id="LOCAL-00010" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732673905615</created>
-      <option name="number" value="00010" />
-      <option name="presentableId" value="LOCAL-00010" />
-      <option name="project" value="LOCAL" />
-      <updated>1732673905615</updated>
-    </task>
-    <task id="LOCAL-00011" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732674467120</created>
-      <option name="number" value="00011" />
-      <option name="presentableId" value="LOCAL-00011" />
-      <option name="project" value="LOCAL" />
-      <updated>1732674467120</updated>
-    </task>
-    <task id="LOCAL-00012" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732674707254</created>
-      <option name="number" value="00012" />
-      <option name="presentableId" value="LOCAL-00012" />
-      <option name="project" value="LOCAL" />
-      <updated>1732674707254</updated>
-    </task>
-    <task id="LOCAL-00013" summary="clean up">
-      <option name="closed" value="true" />
-      <created>1732675059365</created>
-      <option name="number" value="00013" />
-      <option name="presentableId" value="LOCAL-00013" />
-      <option name="project" value="LOCAL" />
-      <updated>1732675059365</updated>
-    </task>
-    <option name="localTasksCounter" value="14" />
-    <servers />
-  </component>
-  <component name="TypeScriptGeneratedFilesManager">
-    <option name="version" value="3" />
-  </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State>
-              <option name="FILTERS">
-                <map>
-                  <entry key="branch">
-                    <value>
-                      <list>
-                        <option value="origin/Ian" />
-                      </list>
-                    </value>
-                  </entry>
-                </map>
-              </option>
-            </State>
-          </value>
-        </entry>
-      </map>
-    </option>
-  </component>
-  <component name="VcsManagerConfiguration">
-    <MESSAGE value="add search button and back button" />
-    <MESSAGE value="fix game history fonts and add test cases" />
-    <MESSAGE value="clean up" />
-    <MESSAGE value="change" />
-    <option name="LAST_COMMIT_MESSAGE" value="change" />
-  </component>
-  <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Project$All_in_note_application.ic" NAME="All in note-application Coverage Results" MODIFIED="1732557669123" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true" />
-    <SUITE FILE_PATH="coverage/Project$SearchHistoryInteractorTest.ic" NAME="SearchHistoryInteractorTest Coverage Results" MODIFIED="1732557492905" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true" />
-    <SUITE FILE_PATH="coverage/_10$SearchResultTest.ic" NAME="SearchResultTest Coverage Results" MODIFIED="1732557367130" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true">
-      <FILTER>entity.*</FILTER>
-    </SUITE>
-    <SUITE FILE_PATH="coverage/_10$java_in_note_application.ic" NAME="java in note-application Coverage Results" MODIFIED="1732563575673" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true" />
-    <SUITE FILE_PATH="coverage/_10$All_in_note_application.ic" NAME="All in note-application Coverage Results" MODIFIED="1732560939600" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true" />
-    <SUITE FILE_PATH="coverage/Branch$java_in_note_application.ic" NAME="java in note-application Coverage Results" MODIFIED="1732562524146" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true" />
-    <SUITE FILE_PATH="coverage/Project$SearchHistoryInteractorTest__1_.ic" NAME="SearchHistoryInteractorTest (1) Coverage Results" MODIFIED="1732557648400" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true">
-      <FILTER>use_case.search.*</FILTER>
-    </SUITE>
-    <SUITE FILE_PATH="coverage/Project$SearchHistoryRecordTest.ic" NAME="SearchHistoryRecordTest Coverage Results" MODIFIED="1732553862414" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true" />
-  </component>
-</project>
\ No newline at end of file
Index: src/test/java/view/SettingsPanelTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport javax.swing.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.mock;\n\nimport view.MainFrame;\nimport view.SettingsPanel;\nimport interface_adapter.PlayGameAspects.PlayGameController;\nimport use_case.playgame.FetchPlayerYearsUseCase;\nimport use_case.playgame.FetchPlayerStatsUseCase;\nimport use_case.playgame.GetAverageStatUseCase;\nimport use_case.search.SearchInteractor;\nimport data_access.DBSearchDataAccessObject;\nimport interface_adapter.search.SearchViewModel;\n\npublic class SettingsPanelTest {\n\n    private SettingsPanel settingsPanel;\n    private JButton toggleButton;\n    private JButton muteButton;\n\n    @BeforeEach\n    public void setup() {\n        FetchPlayerYearsUseCase yearsUseCase = mock(FetchPlayerYearsUseCase.class);\n        FetchPlayerStatsUseCase statsUseCase = mock(FetchPlayerStatsUseCase.class);\n        GetAverageStatUseCase averageStatUseCase = mock(GetAverageStatUseCase.class);\n\n        PlayGameController playGameController = new PlayGameController(yearsUseCase, statsUseCase, averageStatUseCase);\n\n        DBSearchDataAccessObject dbSearchData = mock(DBSearchDataAccessObject.class);\n        SearchViewModel searchViewModel = mock(SearchViewModel.class);\n\n        SearchInteractor searchInteractor = new SearchInteractor(dbSearchData, searchViewModel);\n\n        MainFrame mainFrame = new MainFrame(playGameController, searchInteractor);\n        settingsPanel = new SettingsPanel(mainFrame);\n    }\n\n\n    @Test\n    public void testToggleTheme() {\n        // Simulate button click for toggling theme\n        toggleButton.doClick();\n\n        // Validate the theme change indirectly\n        assertNotNull(settingsPanel);\n        assertTrue(toggleButton.getText().contains(\"Mode\")); // Should update label to reflect theme change\n    }\n\n    @Test\n    public void testMuteUnmute() {\n        // Simulate button click for toggling mute state\n        muteButton.doClick();\n\n        // Validate mute/unmute state indirectly\n        assertNotNull(settingsPanel);\n        assertTrue(muteButton.getText().contains(\"Music\")); // Should update label to reflect mute state\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/view/SettingsPanelTest.java b/src/test/java/view/SettingsPanelTest.java
--- a/src/test/java/view/SettingsPanelTest.java	(revision b09fecaaf2e48c3e2a5b59bd21987710e4863bc1)
+++ b/src/test/java/view/SettingsPanelTest.java	(date 1732762529524)
@@ -1,60 +1,76 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import view.MusicManager.AudioController;
+import view.SettingsPanel;
+import view.MainFrame;
+import view.ThemeManager.ThemeController;
 import javax.swing.*;
+import static org.mockito.Mockito.*;
 import static org.junit.jupiter.api.Assertions.*;
-import static org.mockito.Mockito.mock;
-
-import view.MainFrame;
-import view.SettingsPanel;
-import interface_adapter.PlayGameAspects.PlayGameController;
-import use_case.playgame.FetchPlayerYearsUseCase;
-import use_case.playgame.FetchPlayerStatsUseCase;
-import use_case.playgame.GetAverageStatUseCase;
-import use_case.search.SearchInteractor;
-import data_access.DBSearchDataAccessObject;
-import interface_adapter.search.SearchViewModel;
 
 public class SettingsPanelTest {
 
     private SettingsPanel settingsPanel;
-    private JButton toggleButton;
     private JButton muteButton;
+    private JButton themeButton;
+    private AudioController mockAudioController;
+    private ThemeController mockThemeController;
 
     @BeforeEach
     public void setup() {
-        FetchPlayerYearsUseCase yearsUseCase = mock(FetchPlayerYearsUseCase.class);
-        FetchPlayerStatsUseCase statsUseCase = mock(FetchPlayerStatsUseCase.class);
-        GetAverageStatUseCase averageStatUseCase = mock(GetAverageStatUseCase.class);
-
-        PlayGameController playGameController = new PlayGameController(yearsUseCase, statsUseCase, averageStatUseCase);
+        // Create mock dependencies
+        mockAudioController = mock(AudioController.class);
+        mockThemeController = mock(ThemeController.class);
 
-        DBSearchDataAccessObject dbSearchData = mock(DBSearchDataAccessObject.class);
-        SearchViewModel searchViewModel = mock(SearchViewModel.class);
+        // Set default behavior for mocks
+        when(mockAudioController.isMuted()).thenReturn(false);
+        when(mockThemeController.isDarkMode()).thenReturn(false);
 
-        SearchInteractor searchInteractor = new SearchInteractor(dbSearchData, searchViewModel);
+        // Initialize MainFrame and SettingsPanel
+        MainFrame mockFrame = mock(MainFrame.class);
+        settingsPanel = new SettingsPanel(mockFrame, mockAudioController, mockThemeController);
 
-        MainFrame mainFrame = new MainFrame(playGameController, searchInteractor);
-        settingsPanel = new SettingsPanel(mainFrame);
+        // Access buttons via the UI components
+        muteButton = new JButton(mockAudioController.isMuted() ? "Unmute Music" : "Mute Music");
+        themeButton = new JButton(mockThemeController.isDarkMode() ? "Switch to Light Mode" : "Switch to Dark Mode");
     }
-
 
     @Test
-    public void testToggleTheme() {
-        // Simulate button click for toggling theme
-        toggleButton.doClick();
+    public void testMuteButtonTogglesAudioController() {
+        // Extract the real mute button from SettingsPanel
+        JButton muteButton = (JButton) settingsPanel.getComponent(1); // Adjust index based on layout
 
-        // Validate the theme change indirectly
-        assertNotNull(settingsPanel);
-        assertTrue(toggleButton.getText().contains("Mode")); // Should update label to reflect theme change
-    }
+        // Simulate a click to mute
+        when(mockAudioController.isMuted()).thenReturn(false);
+        muteButton.doClick();
+        verify(mockAudioController, times(1)).mute();
 
-    @Test
-    public void testMuteUnmute() {
-        // Simulate button click for toggling mute state
+        // Simulate a click to unmute
+        when(mockAudioController.isMuted()).thenReturn(true);
         muteButton.doClick();
+        verify(mockAudioController, times(1)).unmute();
+    }
+
+    @Test
+    public void testThemeButtonTogglesThemeController() {
+        JButton themeButton = (JButton) settingsPanel.getComponent(0); // Adjust index based on layout
 
-        // Validate mute/unmute state indirectly
+        // Simulate a click to toggle theme
+        themeButton.doClick();
+        verify(mockThemeController, times(1)).toggleDarkMode();
+
+        // Simulate another click
+        themeButton.doClick();
+        verify(mockThemeController, times(2)).toggleDarkMode();
+    }
+
+    @Test
+    public void testPanelInitialization() {
+        // Verify that the SettingsPanel is not null
         assertNotNull(settingsPanel);
-        assertTrue(muteButton.getText().contains("Music")); // Should update label to reflect mute state
+
+        // Verify the buttons have correct initial text
+        assertEquals("Mute Music", muteButton.getText());
+        assertEquals("Switch to Dark Mode", themeButton.getText());
     }
 }
Index: src/main/java/view/MainFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\n\nimport java.awt.CardLayout;\nimport java.awt.Component;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\nimport data_access.AccountDataAccessObject;\nimport data_access.SearchHistoryDataAccessObject;\nimport interface_adapter.account.AccountController;\nimport interface_adapter.account.AccountPresenter;\nimport interface_adapter.play_game_aspects.PlayGameController;\nimport interface_adapter.search.SearchHistoryController;\nimport use_case.account.AccountInteractor;\nimport use_case.search.SearchHistoryInteractor;\nimport use_case.search.SearchInteractor;\nimport view.playgame.PlayGamePanel;\nimport view.MusicManager.*;\nimport view.ThemeManager.ThemeController;\nimport view.ThemeManager.ThemeManager;\n\n/**\n * MainFrame class represents the main application frame with various panels.\n */\npublic class MainFrame extends JFrame {\n    private static final int FRAME_WIDTH = 800;\n    private static final int FRAME_HEIGHT = 400;\n    private static final String MUSIC_PATH =\n            \"/Users/mohitbendale/HoopsHub/src/main/java/music/369920__mrthenoronha__cartoon-game-theme-loop.wav\";\n\n    private final CardLayout cardLayout = new CardLayout();\n    private final JPanel mainPanel = new JPanel(cardLayout);\n    private final ThemeManager themeManager = ThemeManager.getInstance();\n\n    /**\n     * Constructs the MainFrame with the necessary controllers and interactors.\n     *\n     * @param controller        the PlayGameController instance\n     * @param searchInteractor  the SearchInteractor instance\n     */\n    public MainFrame(PlayGameController controller, SearchInteractor searchInteractor) {\n        setTitle(\"Game App\");\n        setSize(FRAME_WIDTH, FRAME_HEIGHT);\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        util.MusicManager.getInstance().playMusic(MUSIC_PATH);\n        AudioController audioController = util.MusicManager.getInstance();\n        ThemeController themeController = ThemeManager.getInstance();\n\n\n        // Add panels to the CardLayout\n        mainPanel.add(new HomePanel(this), \"Home\");                        // Home panel\n        mainPanel.add(new PlayGamePanel(this, controller), \"Play\");        // PlayGame panel\n        mainPanel.add(new SearchPanel(this, searchInteractor), \"Search\"); // Search panel\n        mainPanel.add(new SettingsPanel(this, audioController, themeController), \"Settings\");\n\n        final SearchHistoryController searchHistoryController = initializeSearchHistoryController();\n        mainPanel.add(new SearchHistoryPanel(searchHistoryController, this), \"SearchHistory\");\n\n        // Add LoginView\n        final AccountController accountController = initializeAccountController();\n        final ActionListener switchToSignUp = event -> switchTo(\"SignUp\");\n        final LoginView loginView = new LoginView(accountController, switchToSignUp);\n        mainPanel.add(loginView, \"Login\");\n\n        add(mainPanel);\n    }\n\n    /**\n     * Switches to a specific panel by name.\n     *\n     * @param panelName the name of the panel to switch to\n     */\n    public void switchTo(String panelName) {\n        cardLayout.show(mainPanel, panelName);\n        applyTheme();\n    }\n\n    /**\n     * Applies the current theme to all components.\n     */\n    private void applyTheme() {\n        for (Component comp : mainPanel.getComponents()) {\n            if (comp instanceof JPanel) {\n                comp.setBackground(themeManager.getBackgroundColor());\n                comp.setForeground(themeManager.getTextColor());\n            }\n        }\n    }\n\n    /**\n     * Starts the MainFrame with the Login panel visible.\n     */\n    public void start() {\n        setVisible(true);\n        switchTo(\"Login\");\n    }\n\n    /**\n     * Initializes the AccountController for managing login and account creation.\n     *\n     * @return an AccountController instance\n     */\n    private AccountController initializeAccountController() {\n        final AccountDataAccessObject accountDataAccess = new AccountDataAccessObject();\n        final AccountPresenter accountPresenter = new AccountPresenter(this, new JFrame(\"Login\"));\n        final AccountInteractor accountInteractor = new AccountInteractor(accountDataAccess, accountPresenter);\n        return new AccountController(accountInteractor);\n    }\n\n    /**\n     * Initializes the SearchHistoryController for managing the search history feature.\n     *\n     * @return a SearchHistoryController instance\n     */\n    private SearchHistoryController initializeSearchHistoryController() {\n        final SearchHistoryDataAccessObject searchHistoryDataAccess = new SearchHistoryDataAccessObject();\n        final SearchHistoryInteractor searchHistoryInteractor = new SearchHistoryInteractor(searchHistoryDataAccess);\n        return new SearchHistoryController(searchHistoryInteractor);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/MainFrame.java b/src/main/java/view/MainFrame.java
--- a/src/main/java/view/MainFrame.java	(revision b09fecaaf2e48c3e2a5b59bd21987710e4863bc1)
+++ b/src/main/java/view/MainFrame.java	(date 1732760663331)
@@ -48,7 +48,6 @@
         AudioController audioController = util.MusicManager.getInstance();
         ThemeController themeController = ThemeManager.getInstance();
 
-
         // Add panels to the CardLayout
         mainPanel.add(new HomePanel(this), "Home");                        // Home panel
         mainPanel.add(new PlayGamePanel(this, controller), "Play");        // PlayGame panel
