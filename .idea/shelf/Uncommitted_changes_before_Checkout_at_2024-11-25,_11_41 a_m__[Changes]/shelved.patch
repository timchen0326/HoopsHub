Index: src/main/java/view/HomePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\n\nimport app.Session;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class HomePanel extends JPanel {\n    public HomePanel(MainFrame frame) {\n        setLayout(new GridLayout(1, 5)); // Adjusted layout to fit the new Search History button\n\n        // Play Game Button\n        JButton playButton = new JButton(\"Play Game\");\n        playButton.addActionListener(e -> frame.switchTo(\"Play\")); // Switch to PlayGame panel\n        add(playButton);\n\n        // Search Button\n        JButton searchButton = new JButton(\"Search\");\n        searchButton.addActionListener(e -> frame.switchTo(\"Search\")); // Switch to Search panel\n        add(searchButton);\n\n        // Search History Button (New Feature)\n        JButton searchHistoryButton = new JButton(\"Search History\");\n        searchHistoryButton.addActionListener(e -> frame.switchTo(\"SearchHistory\")); // Switch to SearchHistory panel\n        add(searchHistoryButton);\n\n        // Welcome Label\n        add(new JLabel(\"Welcome to the Game App\"));\n\n        // Logout Button\n        JButton logoutButton = new JButton(\"Logout\");\n        logoutButton.addActionListener(e -> {\n            // Clear session data\n            Session.getInstance().clear();\n\n            // Navigate to LoginView\n            frame.switchTo(\"Login\");\n        });\n        add(logoutButton);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/HomePanel.java b/src/main/java/view/HomePanel.java
--- a/src/main/java/view/HomePanel.java	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/src/main/java/view/HomePanel.java	(date 1732552284980)
@@ -6,6 +6,8 @@
 import java.awt.*;
 
 public class HomePanel extends JPanel {
+    private final ThemeManager themeManager = ThemeManager.getInstance();
+
     public HomePanel(MainFrame frame) {
         setLayout(new GridLayout(1, 5)); // Adjusted layout to fit the new Search History button
 
@@ -27,6 +29,13 @@
         // Welcome Label
         add(new JLabel("Welcome to the Game App"));
 
+        // Settings Button
+        JButton settingsButton = new JButton("Settings");
+        settingsButton.addActionListener(e -> frame.switchTo("Settings"));
+        add(settingsButton);
+
+        updateTheme();
+
         // Logout Button
         JButton logoutButton = new JButton("Logout");
         logoutButton.addActionListener(e -> {
@@ -38,4 +47,9 @@
         });
         add(logoutButton);
     }
+
+    private void updateTheme() {
+        setBackground(themeManager.getBackgroundColor());
+        setForeground(themeManager.getTextColor());
+    }
 }
Index: src/main/java/app/MainSearchApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\n\nimport data_access.DBSearchDataAccessObject;\nimport interface_adapter.PlayGameController;\nimport interface_adapter.search.SearchViewModel;\nimport use_case.search.SearchInteractor;\nimport view.MainFrame;\n\npublic class MainSearchApplication {\n\n    public static void main(String[] args) {\n        // Step 1: Initialize dependencies for SearchInteractor\n        DBSearchDataAccessObject dataAccess = new DBSearchDataAccessObject();\n        SearchViewModel viewModel = new SearchViewModel();\n        SearchInteractor searchInteractor = new SearchInteractor(dataAccess, viewModel);\n\n        // Step 2: Initialize PlayGameController\n        PlayGameController playGameController = new PlayGameController(null); // Pass required dependencies\n\n        // Step 3: Initialize MainFrame\n        MainFrame mainFrame = new MainFrame(playGameController, searchInteractor);\n\n        // Step 4: Start the MainFrame\n        mainFrame.start();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/app/MainSearchApplication.java b/src/main/java/app/MainSearchApplication.java
--- a/src/main/java/app/MainSearchApplication.java	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/src/main/java/app/MainSearchApplication.java	(date 1732552284983)
@@ -23,4 +23,4 @@
         // Step 4: Start the MainFrame
         mainFrame.start();
     }
-}
+}
\ No newline at end of file
Index: src/main/java/app/GameApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\n\nimport data_access.DBSearchDataAccessObject;\nimport interface_adapter.PlayGameController;\nimport interface_adapter.search.SearchViewModel;\nimport use_case.search.SearchInteractor;\nimport view.MainFrame;\n\npublic class GameApplication {\n    public static void main(String[] args) {\n        // Step 1: Initialize dependencies for SearchInteractor\n        DBSearchDataAccessObject searchDataAccess = new DBSearchDataAccessObject();\n        SearchViewModel searchViewModel = new SearchViewModel();\n        SearchInteractor searchInteractor = new SearchInteractor(searchDataAccess, searchViewModel);\n\n        // Step 2: Create PlayGameController\n        PlayGameController playGameController = new PlayGameUseCaseFactory().createController();\n\n        // Step 3: Initialize MainFrame with both dependencies\n        MainFrame mainFrame = new MainFrame(playGameController, searchInteractor);\n\n        // Step 4: Start MainFrame\n        mainFrame.start();\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/app/GameApplication.java b/src/main/java/app/GameApplication.java
--- a/src/main/java/app/GameApplication.java	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/src/main/java/app/GameApplication.java	(date 1732552284986)
@@ -5,6 +5,7 @@
 import interface_adapter.search.SearchViewModel;
 import use_case.search.SearchInteractor;
 import view.MainFrame;
+import view.SearchPanel;
 
 public class GameApplication {
     public static void main(String[] args) {
@@ -23,4 +24,3 @@
         mainFrame.start();
     }
 }
-
Index: src/main/java/interface_adapter/PlayGameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package interface_adapter;\n\nimport use_case.playgame.FetchPlayerStatisticsInputBoundary;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PlayGameController {\n    private final FetchPlayerStatisticsInputBoundary interactor;\n\n    public PlayGameController(FetchPlayerStatisticsInputBoundary interactor) {\n        this.interactor = interactor;\n    }\n\n    public List<String> getAvailableYears(String playerName) {\n        // Convert List<Integer> to List<String>\n        return interactor.getAvailableYears(playerName)\n                .stream()\n                .map(String::valueOf)\n                .collect(Collectors.toList());\n    }\n\n    public String fetchPlayerStatisticsByYear(String playerName, String year) {\n        return interactor.fetchPlayerStatisticsByYear(playerName, Integer.parseInt(year));\n    }\n\n    public double getAverageStatistic(String statType, String playerName, String year) {\n        return interactor.getAverageStat(playerName, year, statType);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/interface_adapter/PlayGameController.java b/src/main/java/interface_adapter/PlayGameController.java
--- a/src/main/java/interface_adapter/PlayGameController.java	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/src/main/java/interface_adapter/PlayGameController.java	(date 1732552284988)
@@ -27,4 +27,4 @@
     public double getAverageStatistic(String statType, String playerName, String year) {
         return interactor.getAverageStat(playerName, year, statType);
     }
-}
+}
\ No newline at end of file
Index: src/main/java/view/SearchPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\n\nimport use_case.search.SearchInteractor;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class SearchPanel extends JPanel {\n    private final SearchInteractor interactor;\n\n    public SearchPanel(MainFrame frame, SearchInteractor interactor) {\n        this.interactor = interactor;\n\n        // Set layout for SearchPanel\n        setLayout(new BorderLayout());\n\n        // Create Input Section\n        JPanel inputPanel = new JPanel(new GridBagLayout());\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.insets = new Insets(5, 5, 5, 5);\n\n        JLabel label = new JLabel(\"Enter username:\");\n        JTextField textField = new JTextField(20);\n        JButton searchButton = new JButton(\"Search\");\n\n        gbc.gridx = 0;\n        gbc.gridy = 0;\n        gbc.anchor = GridBagConstraints.WEST;\n        inputPanel.add(label, gbc);\n\n        gbc.gridx = 1;\n        gbc.fill = GridBagConstraints.HORIZONTAL;\n        inputPanel.add(textField, gbc);\n\n        gbc.gridx = 2;\n        gbc.fill = GridBagConstraints.NONE;\n        inputPanel.add(searchButton, gbc);\n\n        // Results Section\n        JTextArea resultsArea = new JTextArea(10, 30);\n        resultsArea.setEditable(false);\n        JScrollPane scrollPane = new JScrollPane(resultsArea);\n\n        // Back Button\n        JButton backButton = new JButton(\"Back\");\n        backButton.addActionListener(e -> frame.switchTo(\"Home\")); // Switch back to HomePanel\n\n        // Add Components to the Panel\n        add(inputPanel, BorderLayout.NORTH);\n        add(scrollPane, BorderLayout.CENTER);\n        add(backButton, BorderLayout.SOUTH);\n\n        // Action Listener for Search\n        searchButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                String username = textField.getText().trim();\n                if (username.isEmpty()) {\n                    resultsArea.setText(\"Please enter a username to search.\");\n                    return;\n                }\n\n                // Call interactor to fetch results\n                String result = interactor.executeSearch(username);\n\n                // Parse results to extract wins, losses, and calculate win/loss ratio\n                int wins = extractValue(result, \"Wins:\");\n                int losses = extractValue(result, \"Losses:\");\n                double winLossRatio = calculateWinLossRatio(wins, losses);\n\n                // Display the results\n                resultsArea.setText(String.format(\"Wins: %d\\nLosses: %d\\nWin Ratio: %.2f%%\",\n                        wins, losses, winLossRatio));\n            }\n        });\n    }\n\n    private int extractValue(String result, String key) {\n        String[] lines = result.split(\"\\\\n\");\n        for (String line : lines) {\n            if (line.startsWith(key)) {\n                try {\n                    return Integer.parseInt(line.replaceAll(\"[^0-9]\", \"\"));\n                } catch (NumberFormatException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return 0;\n    }\n\n    private double calculateWinLossRatio(int wins, int losses) {\n        int totalGames = wins + losses;\n        if (totalGames == 0) {\n            return 0.0;\n        }\n        return ((double) wins / totalGames) * 100;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/SearchPanel.java b/src/main/java/view/SearchPanel.java
--- a/src/main/java/view/SearchPanel.java	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/src/main/java/view/SearchPanel.java	(date 1732552284990)
@@ -9,12 +9,14 @@
 
 public class SearchPanel extends JPanel {
     private final SearchInteractor interactor;
+    private final ThemeManager themeManager = ThemeManager.getInstance();
 
     public SearchPanel(MainFrame frame, SearchInteractor interactor) {
         this.interactor = interactor;
 
         // Set layout for SearchPanel
         setLayout(new BorderLayout());
+        updateTheme();
 
         // Create Input Section
         JPanel inputPanel = new JPanel(new GridBagLayout());
@@ -77,6 +79,20 @@
         });
     }
 
+    private void updateTheme() {
+        setBackground(themeManager.getBackgroundColor());
+        setForeground(themeManager.getTextColor());
+
+        for (Component comp : getComponents()) {
+            if (comp instanceof JLabel) {
+                comp.setForeground(themeManager.getTextColor());
+            } else if (comp instanceof JTextArea) {
+                comp.setBackground(themeManager.getBackgroundColor());
+                comp.setForeground(themeManager.getTextColor());
+            }
+        }
+    }
+
     private int extractValue(String result, String key) {
         String[] lines = result.split("\\n");
         for (String line : lines) {
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"corretto-17\" project-jdk-type=\"JavaSDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/.idea/misc.xml	(date 1732552284992)
@@ -8,5 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="corretto-17" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="corretto-17" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2687973d-8249-4f02-8355-4363ebdade45\" name=\"Changes\" comment=\"add search button and back button\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Constants.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Constants.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Performance.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Performance.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Play.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Play.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/StatementPrinter.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/StatementPrinter.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;rjlee224&quot;\n  }\n}</component>\n  <component name=\"GitToolBoxStore\">\n    <option name=\"recentBranches\">\n      <RecentBranches>\n        <option name=\"branchesForRepo\">\n          <list>\n            <RecentBranchesForRepo>\n              <option name=\"branches\">\n                <list>\n                  <RecentBranch>\n                    <option name=\"branchName\" value=\"model-update\" />\n                    <option name=\"lastUsedInstant\" value=\"1731947528\" />\n                  </RecentBranch>\n                  <RecentBranch>\n                    <option name=\"branchName\" value=\"main\" />\n                    <option name=\"lastUsedInstant\" value=\"1731947527\" />\n                  </RecentBranch>\n                </list>\n              </option>\n              <option name=\"repositoryRootUrl\" value=\"file://$PROJECT_DIR$\" />\n            </RecentBranchesForRepo>\n          </list>\n        </option>\n      </RecentBranches>\n    </option>\n  </component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/timchen0326/HoopsHub.git&quot;,\n    &quot;accountId&quot;: &quot;e94760cd-9e51-46be-a781-4815c6c0578e&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2owl3RKtehtcblmMrK11SEfNMZM\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.MainApplication.executor\": \"Run\",\n    \"Application.MainSearchApplication.executor\": \"Run\",\n    \"JUnit.All in note-application.executor\": \"Run\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"Game-History\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"settings.editor.selected.configurable\": \"project.propVCSSupport.DirectoryMappings\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\" selected=\"Application.MainApplication\">\n    <configuration name=\"MainApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.MainApplication\" />\n      <module name=\"note-application\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"app.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"All in note-application\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"note-application\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"TEST_OBJECT\" value=\"package\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.MainApplication\" />\n        <item itemvalue=\"JUnit.All in note-application\" />\n        <item itemvalue=\"Application.MainApplication\" />\n        <item itemvalue=\"JUnit.All in note-application\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.21829.142\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-IU-242.21829.142\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2687973d-8249-4f02-8355-4363ebdade45\" name=\"Changes\" comment=\"add search button and back button\" />\n      <created>1725200606304</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1725200606304</updated>\n      <workItem from=\"1731788321326\" duration=\"6950000\" />\n      <workItem from=\"1731946685436\" duration=\"6724000\" />\n      <workItem from=\"1732159120624\" duration=\"6025000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"add search button and back button\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1731396633141</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1731396633141</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"origin/Ian\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"add search button and back button\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add search button and back button\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/.idea/workspace.xml	(date 1732552609549)
@@ -5,11 +5,18 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="2687973d-8249-4f02-8355-4363ebdade45" name="Changes" comment="add search button and back button">
+      <change afterPath="$PROJECT_DIR$/src/main/java/view/MusicManager.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/view/SettingsPanel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/view/ThemeManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Constants.java" beforeDir="false" afterPath="$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Constants.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Performance.java" beforeDir="false" afterPath="$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Performance.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Play.java" beforeDir="false" afterPath="$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/Play.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/StatementPrinter.java" beforeDir="false" afterPath="$PROJECT_DIR$/../week4git/src/main/java/edu/csc207/fall2024/StatementPrinter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/app/GameApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/app/GameApplication.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/app/MainSearchApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/app/MainSearchApplication.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/interface_adapter/PlayGameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/interface_adapter/PlayGameController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/HomePanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/HomePanel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/PlayGamePanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/PlayGamePanel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/view/SearchPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/view/SearchPanel.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -84,7 +91,7 @@
     "Application.MainSearchApplication.executor": "Run",
     "JUnit.All in note-application.executor": "Run",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "Game-History",
+    "git-widget-placeholder": "main",
     "kotlin-language-version-configured": "true",
     "node.js.detected.package.eslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
@@ -94,7 +101,7 @@
     "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
-  <component name="RunManager" selected="Application.MainApplication">
+  <component name="RunManager" selected="Application.MainSearchApplication">
     <configuration name="MainApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="app.MainApplication" />
       <module name="note-application" />
@@ -108,6 +115,19 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration name="MainSearchApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="app.MainSearchApplication" />
+      <module name="note-application" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="app.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <configuration name="All in note-application" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="note-application" />
       <option name="PACKAGE_NAME" value="" />
@@ -118,8 +138,9 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="JUnit.All in note-application" />
+        <item itemvalue="Application.MainSearchApplication" />
         <item itemvalue="Application.MainApplication" />
-        <item itemvalue="JUnit.All in note-application" />
         <item itemvalue="Application.MainApplication" />
         <item itemvalue="JUnit.All in note-application" />
       </list>
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>edu.csc207</groupId>\n    <artifactId>note-application</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.json</groupId>\n            <artifactId>json</artifactId>\n            <version>20240303</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.squareup.okhttp3</groupId>\n            <artifactId>okhttp</artifactId>\n            <version>4.12.0</version>\n        </dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.13.1</version>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n\n\n\n    <properties>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/pom.xml	(date 1732552284999)
@@ -9,7 +9,11 @@
     <version>1.0-SNAPSHOT</version>
 
     <dependencies>
-
+        <dependency>
+            <groupId>org.openjfx</groupId>
+            <artifactId>javafx-controls</artifactId>
+            <version>20</version>
+        </dependency>
         <dependency>
             <groupId>org.json</groupId>
             <artifactId>json</artifactId>
@@ -36,6 +40,7 @@
         <maven.compiler.source>11</maven.compiler.source>
         <maven.compiler.target>11</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <javafx.version>20</javafx.version>
     </properties>
 
 </project>
\ No newline at end of file
Index: src/main/java/view/MusicManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/MusicManager.java b/src/main/java/view/MusicManager.java
new file mode 100644
--- /dev/null	(date 1732552284997)
+++ b/src/main/java/view/MusicManager.java	(date 1732552284997)
@@ -0,0 +1,73 @@
+package util;
+
+import javax.sound.sampled.*;
+import java.io.File;
+import java.io.IOException;
+
+public class MusicManager {
+    private static MusicManager instance;
+    private Clip musicClip;
+    private boolean isMuted = false;
+
+    private MusicManager() {}
+
+    public static MusicManager getInstance() {
+        if (instance == null) {
+            instance = new MusicManager();
+        }
+        return instance;
+    }
+
+    public void playMusic(String filePath) {
+        try {
+            if (musicClip != null && musicClip.isOpen()) {
+                musicClip.stop(); // Stop any existing playback
+                musicClip.close();
+            }
+
+            File musicFile = new File(filePath);
+            AudioInputStream audioStream = AudioSystem.getAudioInputStream(musicFile);
+            musicClip = AudioSystem.getClip();
+            musicClip.open(audioStream);
+
+            // Add a listener to restart the music when it finishes
+            musicClip.addLineListener(event -> {
+                if (event.getType() == LineEvent.Type.STOP && !isMuted) {
+                    musicClip.setFramePosition(0); // Restart from the beginning
+                    musicClip.start();
+                }
+            });
+
+            if (!isMuted) {
+                musicClip.start();
+            }
+        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void stopMusic() {
+        if (musicClip != null && musicClip.isRunning()) {
+            musicClip.stop();
+        }
+    }
+
+    public void muteMusic() {
+        isMuted = true;
+        if (musicClip != null && musicClip.isRunning()) {
+            musicClip.stop();
+        }
+    }
+
+    public void unmuteMusic() {
+        isMuted = false;
+        if (musicClip != null && !musicClip.isRunning()) {
+            musicClip.setFramePosition(0); // Restart from the beginning
+            musicClip.start();
+        }
+    }
+
+    public boolean isMuted() {
+        return isMuted;
+    }
+}
Index: src/main/java/view/SettingsPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/SettingsPanel.java b/src/main/java/view/SettingsPanel.java
new file mode 100644
--- /dev/null	(date 1732552285001)
+++ b/src/main/java/view/SettingsPanel.java	(date 1732552285001)
@@ -0,0 +1,55 @@
+package view;
+
+import util.MusicManager;
+import javax.swing.*;
+import java.awt.*;
+
+public class SettingsPanel extends JPanel {
+    private final ThemeManager themeManager = ThemeManager.getInstance();
+    private final MusicManager musicManager = MusicManager.getInstance();
+
+    public SettingsPanel(MainFrame frame) {
+        setLayout(new BorderLayout());
+
+        JButton toggleButton = new JButton("Switch to Dark Mode");
+        updateButtonLabel(toggleButton);
+
+        toggleButton.addActionListener(e -> {
+            themeManager.setDarkMode(!themeManager.isDarkMode());
+            updateTheme();
+            updateButtonLabel(toggleButton);
+        });
+
+        JButton muteButton = new JButton("Mute Music");
+        updateMuteButton(muteButton);
+
+        muteButton.addActionListener(e -> {
+            if (musicManager.isMuted()) {
+                musicManager.unmuteMusic();
+            } else {
+                musicManager.muteMusic();
+            }
+            updateMuteButton(muteButton);
+        });
+
+        JButton backButton = new JButton("Back");
+        backButton.addActionListener(e -> frame.switchTo("Home"));
+
+        add(toggleButton, BorderLayout.NORTH);
+        add(muteButton, BorderLayout.CENTER);
+        add(backButton, BorderLayout.SOUTH);
+    }
+
+    private void updateTheme() {
+        setBackground(themeManager.getBackgroundColor());
+        setForeground(themeManager.getTextColor());
+    }
+
+    private void updateButtonLabel(JButton button) {
+        button.setText(themeManager.isDarkMode() ? "Switch to Light Mode" : "Switch to Dark Mode");
+    }
+
+    private void updateMuteButton(JButton button) {
+        button.setText(musicManager.isMuted() ? "Unmute Music" : "Mute Music");
+    }
+}
Index: src/main/java/view/ThemeManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/ThemeManager.java b/src/main/java/view/ThemeManager.java
new file mode 100644
--- /dev/null	(date 1732552285003)
+++ b/src/main/java/view/ThemeManager.java	(date 1732552285003)
@@ -0,0 +1,35 @@
+package view;
+
+import java.awt.Color;
+
+public class ThemeManager {
+    private static ThemeManager instance;
+    private boolean isDarkMode = false;
+
+    private ThemeManager() {
+
+    }
+
+    public static ThemeManager getInstance() {
+        if (instance == null) {
+            instance = new ThemeManager();
+        }
+        return instance;
+    }
+
+    public boolean isDarkMode() {
+        return isDarkMode;
+    }
+
+    public void setDarkMode(boolean darkMode) {
+        isDarkMode = darkMode;
+    }
+
+    public Color getBackgroundColor() {
+        return isDarkMode ? Color.DARK_GRAY : Color.WHITE;
+    }
+
+    public Color getTextColor() {
+        return isDarkMode ? Color.WHITE : Color.BLACK;
+    }
+}
\ No newline at end of file
Index: src/main/java/view/PlayGamePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\n\nimport app.Session;\nimport data_access.AccountDataAccessObject;\nimport interface_adapter.PlayGameController;\nimport interface_adapter.PlayerStatsFormatter;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ItemEvent;\nimport java.util.List;\nimport java.util.Random;\n\npublic class PlayGamePanel extends JPanel {\n    private final JTextField playerNameField = new JTextField(20);\n    private final JComboBox<String> yearComboBox = new JComboBox<>();\n    private final JTextArea statsArea = new JTextArea(12, 40);\n    private final JComboBox<String> guessComboBox = new JComboBox<>(new String[]{\"Average Rebounds\", \"Average Points\", \"Average Assists\"});\n    private final JLabel randomGuessLabel = new JLabel(\"Generated Value: --\");\n    private final JButton fetchButton = new JButton(\"Fetch Stats\");\n    private final JButton fetchYearButton = new JButton(\"Select Year\");\n    private final JButton overButton = new JButton(\"Over\");\n    private final JButton underButton = new JButton(\"Under\");\n    private final JPanel yearPanel = new JPanel();\n\n    private double currentTrueAverage; // Store the true average of the current stat\n\n    public PlayGamePanel(MainFrame frame, PlayGameController controller) {\n        setLayout(new BorderLayout(20, 20));\n\n        // Input Panel\n        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));\n        inputPanel.add(new JLabel(\"Enter Player Name:\"));\n        inputPanel.add(playerNameField);\n        inputPanel.add(fetchButton);\n\n        // Year Selection Panel\n        yearPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));\n        yearPanel.add(new JLabel(\"Select Year:\"));\n        yearPanel.add(yearComboBox);\n        yearPanel.add(fetchYearButton);\n        yearPanel.setVisible(false);\n\n        // Stats Area Panel\n        statsArea.setEditable(false);\n        statsArea.setLineWrap(true);\n        statsArea.setWrapStyleWord(true);\n        JScrollPane scrollPane = new JScrollPane(statsArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n        scrollPane.setBorder(BorderFactory.createTitledBorder(\"Player Statistics\"));\n\n        // Guess Panel\n        JPanel guessPanel = new JPanel(new GridBagLayout());\n        guessPanel.setBorder(BorderFactory.createTitledBorder(\"Make a Guess\"));\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.insets = new Insets(10, 10, 10, 10);\n        gbc.fill = GridBagConstraints.HORIZONTAL;\n\n        gbc.gridx = 0; gbc.gridy = 0;\n        guessPanel.add(new JLabel(\"Which one do you want to guess?\"), gbc);\n\n        gbc.gridx = 1; gbc.gridy = 0;\n        guessPanel.add(guessComboBox, gbc);\n\n        gbc.gridx = 0; gbc.gridy = 1;\n        guessPanel.add(randomGuessLabel, gbc);\n\n        gbc.gridx = 0; gbc.gridy = 2;\n        guessPanel.add(overButton, gbc);\n\n        gbc.gridx = 1; gbc.gridy = 2;\n        guessPanel.add(underButton, gbc);\n\n        // Back Button\n        JButton backButton = new JButton(\"Back\");\n        backButton.addActionListener(e -> {\n            frame.switchTo(\"Home\");\n            reset(); // Reset the panel when the user goes back\n        });\n        JPanel backPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n        backPanel.add(backButton);\n\n        // Add Listeners\n        fetchButton.addActionListener(e -> fetchPlayerYears(controller));\n        fetchYearButton.addActionListener(e -> fetchPlayerStats(controller));\n        guessComboBox.addItemListener(e -> {\n            if (e.getStateChange() == ItemEvent.SELECTED) {\n                updateGeneratedValue(controller); // Update the generated value based on the selected stat\n            }\n        });\n\n        overButton.addActionListener(e -> handleOverUnderGuess(true));\n        underButton.addActionListener(e -> handleOverUnderGuess(false));\n\n        // Layout\n        add(inputPanel, BorderLayout.NORTH);\n        add(yearPanel, BorderLayout.WEST);\n        add(scrollPane, BorderLayout.CENTER);\n        add(guessPanel, BorderLayout.EAST);\n        add(backPanel, BorderLayout.SOUTH);\n    }\n\n    private void fetchPlayerYears(PlayGameController controller) {\n        String playerName = playerNameField.getText();\n        List<String> availableYears = controller.getAvailableYears(playerName);\n\n        if (!availableYears.isEmpty()) {\n            yearComboBox.removeAllItems();\n            for (String year : availableYears) {\n                yearComboBox.addItem(year);\n            }\n            yearPanel.setVisible(true);\n        } else {\n            JOptionPane.showMessageDialog(this, \"No data available for this player.\");\n        }\n    }\n\n    private void fetchPlayerStats(PlayGameController controller) {\n        String playerName = playerNameField.getText();\n        String selectedYear = (String) yearComboBox.getSelectedItem();\n\n        if (selectedYear != null) {\n            String statsJson = controller.fetchPlayerStatisticsByYear(playerName, selectedYear);\n            String formattedStats = PlayerStatsFormatter.formatPlayerStats(statsJson);\n            statsArea.setText(formattedStats);\n\n            // Automatically update generated value\n            updateGeneratedValue(controller);\n        } else {\n            JOptionPane.showMessageDialog(this, \"Please select a valid year.\");\n        }\n    }\n\n    private void updateGeneratedValue(PlayGameController controller) {\n        String selectedStat = (String) guessComboBox.getSelectedItem();\n        String playerName = playerNameField.getText();\n        String selectedYear = (String) yearComboBox.getSelectedItem();\n\n        if (selectedYear == null || selectedStat == null) return;\n\n        currentTrueAverage = controller.getAverageStatistic(selectedStat, playerName, selectedYear);\n        double randomValue = generateRandomOffset(currentTrueAverage);\n        randomGuessLabel.setText(\"Generated Value: \" + String.format(\"%.2f\", randomValue));\n    }\n\n    private void handleOverUnderGuess(boolean isOver) {\n        double randomValue = Double.parseDouble(randomGuessLabel.getText().split(\": \")[1]);\n        String result;\n        boolean isCorrect;\n\n        if (isOver) {\n            isCorrect = currentTrueAverage > randomValue;\n            result = isCorrect ? \"Correct! It's Over!\" : \"Incorrect! It's Under!\";\n        } else {\n            isCorrect = currentTrueAverage < randomValue;\n            result = isCorrect ? \"Correct! It's Under!\" : \"Incorrect! It's Over!\";\n        }\n\n        JOptionPane.showMessageDialog(this, result + \"\\nTrue Average: \" + currentTrueAverage + \"\\nRandom Value: \" + randomValue);\n\n        // Update session info\n        Session session = Session.getInstance();\n        if (isCorrect) {\n            session.setWin(session.getWin() + 1);\n        } else {\n            session.setLose(session.getLose() + 1);\n        }\n\n        // Update history\n        JSONObject newHistoryEntry = new JSONObject();\n        newHistoryEntry.put(\"player\", playerNameField.getText());\n        newHistoryEntry.put(\"stats\", guessComboBox.getSelectedItem());\n        newHistoryEntry.put(\"year\", yearComboBox.getSelectedItem());\n        newHistoryEntry.put(\"result\", isCorrect ? \"Win\" : \"Lose\");\n\n        session.addHistoryEntry(newHistoryEntry); // Add to session's history\n\n        // Convert updated session info to JSON\n        JSONObject updatedInfo = new JSONObject();\n        updatedInfo.put(\"username\", session.getUsername());\n        updatedInfo.put(\"password\", session.getPassword());\n\n        JSONObject info = new JSONObject();\n        info.put(\"win\", session.getWin());\n        info.put(\"lose\", session.getLose());\n        info.put(\"history\", new JSONArray(session.getHistory())); // Convert list to JSONArray\n        info.put(\"password\", session.getPassword());\n\n        updatedInfo.put(\"info\", info);\n\n        // Push updated info to API\n        try {\n            AccountDataAccessObject accountDataAccess = new AccountDataAccessObject();\n            accountDataAccess.updateUserInfo(updatedInfo);\n        } catch (Exception e) {\n            JOptionPane.showMessageDialog(this, \"Failed to update user info: \" + e.getMessage());\n        }\n    }\n\n\n\n\n    private double generateRandomOffset(double trueAverage) {\n        Random random = new Random();\n        return trueAverage + (random.nextDouble() * 3) * (random.nextBoolean() ? 1 : -1);\n    }\n\n    /**\n     * Reset the PlayGamePanel components to their default state.\n     */\n    private void reset() {\n        playerNameField.setText(\"\");\n        yearComboBox.removeAllItems();\n        yearPanel.setVisible(false);\n        statsArea.setText(\"\");\n        guessComboBox.setSelectedIndex(0);\n        randomGuessLabel.setText(\"Generated Value: --\");\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/view/PlayGamePanel.java b/src/main/java/view/PlayGamePanel.java
--- a/src/main/java/view/PlayGamePanel.java	(revision 76f9a58b9579c0a7f95438e72c22ace8a5198f4f)
+++ b/src/main/java/view/PlayGamePanel.java	(date 1732552285006)
@@ -24,11 +24,14 @@
     private final JButton overButton = new JButton("Over");
     private final JButton underButton = new JButton("Under");
     private final JPanel yearPanel = new JPanel();
+    private final ThemeManager themeManager = ThemeManager.getInstance();
 
     private double currentTrueAverage; // Store the true average of the current stat
 
     public PlayGamePanel(MainFrame frame, PlayGameController controller) {
+
         setLayout(new BorderLayout(20, 20));
+        updateTheme();
 
         // Input Panel
         JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
@@ -101,6 +104,20 @@
         add(backPanel, BorderLayout.SOUTH);
     }
 
+    private void updateTheme() {
+        setBackground(themeManager.getBackgroundColor());
+        setForeground(themeManager.getTextColor());
+
+        for (Component comp : getComponents()) {
+            if (comp instanceof JLabel) {
+                comp.setForeground(themeManager.getTextColor());
+            } else if (comp instanceof JTextArea) {
+                comp.setBackground(themeManager.getBackgroundColor());
+                comp.setForeground(themeManager.getTextColor());
+            }
+        }
+    }
+
     private void fetchPlayerYears(PlayGameController controller) {
         String playerName = playerNameField.getText();
         List<String> availableYears = controller.getAvailableYears(playerName);
